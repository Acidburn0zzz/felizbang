#!/bin/bash

# The FelizBang installation scripts for Openbox Arch Linux
# May 2016

# /squiff/desktop - Semi-graphical Dialog interface
# Functions relevant to users, locations, settings and review

# Developed by Elizabeth Mills, incorporating some code adapted from
# the Evo/Lution script by Carl Duff and AUI scripts by HelmuthDU.

# Please read the introduction in the README file

# ----------------     -----------------------
# Function    Line     Function           Line
# ----------------     -----------------------
# getkeymap     24     FinalCheck           93 
# setlocale     36     ManualSettings      183
# settimezone   51     ChangeRootPartition 356
# UserName      70     ChangeSwapPartition 364
# Hostname      81     ChangePartitions    372
# ----------------     -----------------------

getkeymap() {
  ListKbs=`cat keymaps.list`
  keyboards=""
  for k in ${ListKbs[@]}; do
    keyboards="$keyboards $k"
  done
  listgen1 "$keyboards"
  dialog --backtitle "$Backtitle" --title " - Keyboards - " --no-shadow --ok-button "Select" --nocancel --menu "Scroll through this list, or type a letter, to find your keyboard.\n" 20 50 12 "${Options[@]}" 2> output.file
  Countrykbd=$(cat output.file)
  loadkeys ${Countrykbd} 2>> feliz.log
}

setlocale() {
  Counter=0 # Added 2016-04-13 debugging "unary operator" error
  LocaleList=(`grep 'UTF-8' /etc/locale.gen | sed 's/\..*$//' | sed '/@/d' | awk '{print $1}' | sed 's/#//g'`)
  for item in ${LocaleList[@]}; do
    Counter=$((Counter+1))
    Options[${Counter}]="$item"
    Counter=$((Counter+1))
    Options[${Counter}]="UTF-8"
  done
  Counter=$((Counter/2))
  dialog --backtitle "$Backtitle" --title " - Locales - " --no-shadow --nocancel --menu "Scroll through this list, or type a letter, to find your locale. This will be used to set language and fonts and to find the best mirrors for downloading your system\n" 20 55 $Counter "${Options[@]}" 2> output.file
  CountryLocale="$(cat output.file).UTF-8"
  CountryCode=(`cat output.file | cut -c4-5`)
}

SetTimeZone() {
  Zones=(`timedatectl list-timezones | sed 's/\/.*$//' | uniq`)
  passzones=""
  for z in ${Zones[@]}; do
    passzones="$passzones $z"
  done
  listgen1 "$passzones"
  dialog --backtitle "$Backtitle" --title " - World_Zones - " --no-shadow --ok-button "Select" --nocancel --menu "To set the system clock, please first choose the World Zone of your location.\n" 20 50 11 "${Options[@]}" 2> output.file
  ZONE=$(cat output.file)
  SubZones=(`timedatectl list-timezones | grep ${ZONE} | sed 's/^.*\///'`)
  passzones=""
  for z in ${SubZones[@]}; do
    passzones="$passzones $z"
  done
  listgen1 "$passzones"
  dialog --backtitle "$Backtitle" --title " - ${ZONE} - " --no-shadow --ok-button "Select" --nocancel --menu "Now select your nearest city from this list.\n" 20 50 13 "${Options[@]}" 2> output.file
  SUBZONE=$(cat output.file)
}

UserName() {
  dialog --backtitle "$Backtitle" --title " - User Name - " --no-shadow --nocancel --inputbox "Enter a name for the primary user of the new system.\nIf you don't create a username here, a default user called 'archie' will be set up\n" 12 50 2> output.file
  Response=$(cat output.file)
  Entered=${Response,,}
  case $Entered in
    "") UserName="archie"
    ;;
    *) UserName=${Entered}
  esac
}

SetHostname() {
  Entered=""
  dialog --backtitle "$Backtitle" --title " - Hostname - " --no-shadow --nocancel --inputbox "A hostname is needed. This will be a unique name to identify your device on a network.\nIf you do not enter one, the default hostname of 'arch-linux' will be used\n" 12 50 2> output.file
  Response=$(cat output.file)
  Entered=${Response,,}
  case $Entered in
    "") HostName="arch-linux"
    ;;
    *) HostName=${Entered}
  esac
}

FinalCheck() {
Repeat=1
while [ $Repeat -gt 0 ]
do
  local Message=
  declare -a Settings
  Settings[1]="$RootPartition $RootType                                         "
  if [ $SwapPartition ] || [ $SwapFile ]; then
    Settings[2]="$SwapPartition $SwapFile"
  else
    Settings[2]="No provision has been made for swap"
  fi
  if [ ${#AddPartList[@]} ]; then
    Counter=0
    Settings[3]=""
    for i in ${AddPartList[@]}
    do
      if [ $Counter -eq 0 ]; then
        Settings[3]="${AddPartList[$Counter]} ${AddPartType[$Counter]} ${AddPartMount[$Counter]}"
      else
        Settings[3]="${Settings[3]} : ${AddPartList[$Counter]} ${AddPartType[$Counter]} ${AddPartMount[$Counter]} "
      fi
      Counter=$((Counter+1))
    done
  else
    Settings[3]="No additional partitions have been allocated"
  fi
  case $Kernel in
    1) Settings[4]="The LTS kernel will be installed"
    ;;
    *) Settings[4]="The latest kernel will be installed"
  esac
  if [ $GrubDevice ]; then
    Settings[5]="Grub will be installed to $GrubDevice"
  else
    Settings[5]="No provision has been made for Grub"
  fi
  Settings[6]="Keyboard is $Countrykbd"
  Settings[7]="Locale will be set to $CountryLocale"
  Settings[8]="Zone/subZone will be $ZONE/$SUBZONE"
  case ${IsInVbox} in
    "VirtualBox") Settings[9]="Virtualbox guest utilities will be installed"
    ;;
    *) Settings[9]="Virtualbox guest utilities will not be installed"
  esac
  if [ -z $DisplayManager ]; then
    Settings[10]="No Display Manager selected"
  else
    Settings[10]="$DisplayManager"
  fi
  Settings[11]="Hostname = '$HostName' :  User = '$UserName'"
  Settings[12]="${LuxuriesList}"
  listgen2 "Root Swap Additional Kernel Grub Keyboard Locale Timezone Virtualbox Identity" "Settings"
  dialog --backtitle "$Backtitle" --title " - Final_Check - " --no-shadow --ok-button "Change" --cancel-button "Continue" --menu "These are the settings you have entered. Please check them. Press <Continue> to install with these settings, or choose an item if you wish to change it\n" 21 65 12 "${Options[@]}" 2> output.file
  RetVal=$?
  Response=$(cat output.file)
  if [ $RetVal -eq 0 ]; then # An item has been selected for change
    ConfirmReview
    case $Response in
      "Root") ChangeRootPartition
          AllocateRoot
      ;;
      "Swap") ChangeSwapPartition
          AllocateSwap
      ;;
      "Additional") ChangePartitions
          MorePartitions
      ;;
      "Kernel") SetKernel
      ;;
      "Grub") SetGrubDevice
      ;;
      "Keyboard") getkeymap
      ;;
      "Locale") setlocale
      ;;
      "Timezone") SetTimeZone
      ;;
      "Virtualbox") ConfirmVbox
      ;;
      "Identity") ManualSettings
      ;;
      *) continue # Any error, restart the while loop
    esac
  else # Continue, Cancel or Esc
    Repeat=0
  fi
done
}

ManualSettings() {
  Retry="Y"
  declare local Settings
  while [ $Retry = "Y" ]
  do
    local Message="Select data to change.\n or <Cancel> to finish"
    Settings[1]="(currently $HostName)"
    Settings[2]="(currently $UserName)"
    listgen2 "Hostname Username" "Settings"
    dialog --backtitle "$Backtitle" --title " - Final_Check - " --no-shadow --ok-button "Select" --menu "Select data to change.\n or <Cancel> to finish\n" 18 60 6 "${Options[@]}" 2> output.file
    RetVal=$?
    Response=$(cat output.file)
    Count=1
    for i in ${Options[@]} # Convert selection into item number in list
    do
      if [ $i = $Response ]; then
        break
      fi
      Count=$((Count+1))
    done
    if [ $RetVal -eq 0 ]; then
      case $Response in
        1) dialog --backtitle "$Backtitle" --title " Data Review " --nocancel \
         --inputbox "\nEnter new hostname (currently: $HostName)\n" 18 50 2> output.file
         Response=$(cat output.file)
         if [ $Response ]; then
          HostName=${Response,,}
         fi
        ;;
        2) dialog --backtitle "$Backtitle" --title " Data Review " --nocancel \
      --inputbox "\nEnter new name for user (currently $UserName)\n" 18 50 2> output.file
         Response=$(cat output.file)
        if [ $Response ]; then
          UserName=${Response,,}
        fi
        ;;
        *) Retry="N"
          break
      esac
    fi
  done
}
