#!/bin/bash

# The FelizBang installation scripts for Openbox Arch Linux
# May 2016

# /cliff/desktop
# CLI functions relevant to users, settings, extra applications and review

# Developed by Elizabeth Mills, incorporating some code adapted from
# the Evo/Lution script by Carl Duff and AUI scripts by HelmuthDU.

# Please read the introduction in the README file

# ------------------     --------------------
# Function      Line     Function        Line
# ------------------     --------------------
# getkeymap       26     SetUserName      191
# setocale        64     SetHostname      207
# SetTimeZone    120     FinalCheck       224
# SetSubZone     151     ManualSettings   313
# ------------------     --------------------

getkeymap() {
  print_heading
  echo
  PrintOne "Let's try to find your keyboard"
  Repeat=1
  while [ $Repeat -eq 1 ]
  do
    echo
    PrintOne "If you know the code for your keyboard layout, enter"
    PrintOne "it now. If not, try entering an abbreviation for your"
    PrintOne "country or language and a list will be displayed ..."
    echo
    TPread "(eg: 'atari' or 'us'): "
    local Term="${Response,,}"
    echo
    ListKbs=`cat keymaps.list | grep ${Term} | sed 's/\..*$//' | sed '/@/d' | awk '{print $1}' | uniq | sed 's/#//g'`
    case ${ListKbs} in
      "") print_heading
        echo
        PrintOne "No keyboards found containing '$Term'"
        PrintOne "Try again"
        continue
        ;;
      *) listgen1 "$ListKbs" "Keyboards" "Retry"
    esac
    case ${Result} in
    "Retry") print_heading
      continue
      ;;
    *) Repeat=0
      Countrykbd="${Result}"
      loadkeys ${Countrykbd} 2>> feliz.log
    esac
  done
  print_heading
  read_timed "The keyboard is now set to: '$Countrykbd'" 1
}

setlocale() {
  SearchPrompt=" (for example: GB or en): "
  print_heading
  PrintOne "Next we will try to find your locale. This will"
  PrintOne "be used to set fonts and language, and to find"
  PrintOne "the best mirrors for downloading your system"
  InvalidEntry=1
  while [ $InvalidEntry -eq 1 ]
  do
    echo
    PrintOne "Please enter a two-letter code for your country or language."
    echo
    TPread "$SearchPrompt"
    print_heading
    if [ -z ${Response} ]
    then
      invalid_option
      print_heading
    else
      echo
      searchterm="${Response,,}"
      LocaleList=(`cat /etc/locale.gen | grep ${searchterm}....UTF-8 | sed 's/\..*$//' | sed '/@/d' | awk '{print $1}' | uniq | sed 's/#//g'`);
      if [ ${#LocaleList[@]} -eq 0 ]
      then
        SEARCHTERM="${Response^^}"
        LocaleList=(`cat /etc/locale.gen | grep ${SEARCHTERM}.UTF-8 | sed 's/\..*$//' | sed  '/@/d' | awk '{print $1}' | uniq | sed 's/#//g'`);
      fi
      local Counter=0
      localelist=""
      for l in ${LocaleList[@]}
      do
        localelist="${localelist} $l"
        Counter=$((Counter+1))
      done
      if [ $Counter -eq 0 ]; then
        invalid_option
        print_heading
        continue
      fi
      PrintOne "Choose your locale from this list, or 'Try_Again': "
      echo
      listgen1 "${localelist}" "" "Try_again}"
      case $Result in
        "Try_again") continue
        ;;
        *) CountryLocale="${Result}.UTF-8"
        CountryCode=(`echo ${Result} | cut -c4-6`)
        break
      esac
    fi
    print_heading
  done
  print_heading
  read_timed "Locale is set to: `echo $CountryLocale | cut -c1-5`" 1
}

SetTimeZone() {
Complete=0
while [ $Complete -eq 0 ]
do
  print_heading
  PrintOne "To set the system clock, please first"
  PrintOne "choose the World Zone of your location."
  Zones=(`timedatectl list-timezones | sed 's/\/.*$//' | uniq`)
  echo
  zones=""
  for x in ${Zones[@]}
  do
    zones="$zones $x"
  done
  listgen1 "${zones}" "World_Zones" "nodone"
  ZONE=$Result
  echo
  case $Result in
    "UTC") SUBZONE=""
        print_heading
        read_timed "Zone set to: '$ZONE'" 1
        Complete=1
    ;;
    *) SetSubZone
    print_heading
    read_timed "Zone and Subzone set to: '$ZONE/$SUBZONE'" 1
  esac
done
echo
}

SetSubZone() {
SubZones=(`timedatectl list-timezones | grep ${ZONE} | sed 's/^.*\///'`)
while [ $Complete -eq 0 ]
do
  print_heading
  PrintOne "World Zone = $ZONE"
  echo
  PrintOne "Please enter the first letter"
  TPread "of your nearest major city: "
  echo
  if [ -z ${Response} ]
  then
    invalid_option
    continue
  else
    Zone2="${Response^^}"
  fi
  subzones=""
  local Counter=0
  for x in ${SubZones[@]}
  do
    if [ `echo $x | cut -c1` = $Zone2 ]; then
      subzones="$subzones $x"
      Counter=$((Counter+1))
    fi
  done
  if [ ${Counter} -eq 0 ]; then
    invalid_option
    continue
  fi
  listgen1 "$subzones" "" "Try_again"
  case $Result in
    "Try_again") break
    ;;
    *) SUBZONE=$Result
  esac
  Complete=1
done
}

SetUserName() {
  print_heading
  PrintOne "Enter a name for the primary user of the new system."
  PrintOne "If you don't create a username here, a default user"
  PrintOne "called 'archie' will be set up"
  echo
  TPread "User Name: "
  Entered=${Response,,}
  case $Entered in
    "") UserName="archie"
    ;;
    *) UserName=${Entered}
  esac
  PrintOne "User '${UserName}' will be created."
}

SetHostname() {
  Entered="arch-linux"
  print_heading
  PrintOne "A hostname is needed. This will be a unique name to identify"
  PrintOne "your device on a network. If you do not enter one, the"
  PrintOne "default hostname of 'arch-linux' will be used."
  echo
  TPread "Enter a hostname for your computer: "
  Entered=${Response,,}
  case $Entered in
    "") HostName="arch-linux"
    ;;
    *) HostName=${Entered}
  esac
  PrintOne "Hostname = $HostName"
}

FinalCheck() {
  Repeat=1
  while [ $Repeat -gt 0 ]
  do
    print_heading
    PrintOne "These are the settings you have entered. Please check them ..."
    echo
    PrintOne "1)  Root partition ... $RootPartition : $RootType" 50
    if [ $SwapPartition ] || [ $SwapFile ]; then
      PrintMany "2)  Swap partition ... $SwapPartition $SwapFile"
    else
      PrintMany "2)  No provision has been made for swap"
    fi
    if [ ${#AddPartList[@]} ]; then
      Counter=0
      PrintMany "3)  Extra partitions ..."
      for i in ${AddPartList[@]}
      do
        PrintMany "     ${AddPartMount[$Counter]} : ${AddPartList[$Counter]} : ${AddPartType[$Counter]}" 50
        Counter=$((Counter+1))
      done
    else
      PrintMany "3)  No additional partitions have been allocated"
    fi
    case $Kernel in
      1) PrintMany "4)  The LTS kernel will be installed"
      ;;
      *) PrintMany "4)  The latest kernel will be installed"
    esac
    if [ $GrubDevice ]; then
    PrintMany "5)  Grub will be installed to $GrubDevice" 50
    else
      PrintMany "5)  No provision has been made for Grub"
    fi
    PrintMany "6)  Keyboard is $Countrykbd"
    PrintMany "7)  Locale will be set to $CountryLocale"
    PrintMany "8)  Zone/subZone will be $ZONE/$SUBZONE"
    case ${IsInVbox} in
      "VirtualBox") PrintMany "9)  Virtualbox guest utilities will be installed"
      ;;
      *) PrintMany "9)  Virtualbox guest utilities will not be installed"
    esac
    PrintMany "10)  Root and user settings ..."
    PrintMany "     Hostname = '$HostName'"
    PrintMany "     User = '$UserName'"
     echo
    PrintOne "Press [Enter] to install with these settings, or"
    Response=20
    TPread "enter an item number if you wish to change it: "
    Change=$Response
    case $Change in
      1) ChangeRootPartition
        AllocateRoot
        Repeat=1
      ;;
      2) ChangeSwapPartition
        AllocateSwap
        Repeat=1
      ;;
      3) ChangePartitions
        MorePartitions
        Repeat=1
      ;;
      4) SetKernel
        Repeat=1
      ;;
      5) SetGrubDevice
        Repeat=1
      ;;
      6) getkeymap
        Repeat=1
      ;;
      7) setlocale
        Repeat=1
      ;;
      8) SetTimeZone
        Repeat=1
      ;;
      9) ConfirmVbox
        Repeat=1
      ;;
      10) ManualSettings
        Repeat=1
      ;;
      *) Repeat=0
    esac
  done
}

ManualSettings() {
  Retry="Y"
  Response=3
  while [ $Retry = "Y" ]
  do
    print_heading
    PrintOne "Enter number for data to change, or [Enter] to finish:"
    echo
    PrintOne "1) Hostname (currently $HostName)"
    PrintMany "2) Username (currently $UserName)"
    echo
    TPread "Enter the number of your selection : "
    echo
    case $Response in
      1) TPread "Enter new Hostname (currently $HostName) : "
         HostName=$Response
        ;;
      2) TPread "Enter new username to be created (currently $UserName) : "
         UserName=$Response
        ;;
      *) Retry="N"
         break
    esac
  done
}
